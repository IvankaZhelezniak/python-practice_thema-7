# Цей код демонструє основні принципи роботи генератора в Python. 
# Функція my_generator визначена як генератор. 
# Вона використовує ключове слово yield, що вказує на те, що ця функція повертатиме генератор.

# Коли функція викликає yield, вона "віддає" значення, яке слідує за yield, і "заморожує" свій поточний стан. 
# Виконання функції буде продовжено з цього місця при наступному виклику. 
# Коли ми виконуємо присвоювання gen = my_generator(), то змінна gen тепер є генератором, що повернула функція my_generator.
def my_generator():
    yield 1
    yield 2
    yield 3

gen = my_generator()

# Використання next()
print(next(gen))  # Виведе 1
print(next(gen))  # Виведе 2
print(next(gen))  # Виведе 3

# Далі йде використання next(). При кожному виклику next(gen), 
# генератор продовжує виконання з місця, де він зупинився останнім разом (після yield). 
# При першому виклику next(gen), генератор виконується від початку до першого yield, тобто повертає 1. 
# При другому виклику next(gen), він продовжує від другого yield і повертає 2. 
# При третьому виклику next(gen), він продовжує до третього yield і повертає 3. 
# Код print(next(gen)) виводить значення, яке повертає генератор на кожному кроці.

# Після того, як генератор повернув усі свої значення, я
# кщо ми виконаємо виклик next(gen), то виникне виняток StopIteration, 
# оскільки більше немає значень для повернення. Цей виняток є сигналом того, що ітерація завершилася.


# Щоб кожен раз не використовувати try except для контролю винятку StopIteration
#  найчастіше генератори використовуються безпосередньо в циклах for ..., який буде це виконувати за нас:
def count_down(start):
    while start > 0:
        yield start
        start -= 1

for number in count_down(5):
    print(number)




# Один з корисних випадків застосування генератору, це ітерація по файлу. 
# Генератор дозволяє нам оброблювати дуже великі файли і при цьому економити пам'ять.
def read_lines(file_path):
    with open(file_path, 'r', encoding="utf-8") as file:
        for line in file:
            yield line.strip()

# Використання генератора для читання рядків з файлу
for line in read_lines("my_file.txt"):
    print(line)
# Цей код відкриває файл my_file.txt і читає його рядок за рядком,
# використовуючи генератор read_lines.
